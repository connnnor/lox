// create a simple ppm image

fun writePpmHeader(width, height) {
    print "P3";
    print width + " " + height;
    print 255;
}

fun clamp(x) {
    if (x < 0) {
        return 0;
    }
    if (x > 1) {
        return 1;
    }
    return x;
}

//
// Vector
//

class Vector {
    init(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    writeColorSamples(samplesPerPixel) {
        var scale = 1 / samplesPerPixel;
        var r = this.x * scale;
        var g = this.y * scale;
        var b = this.z * scale;

        print floor(255.999*clamp(r)) + " "
            + floor(255.999*clamp(g)) + " "
            + floor(255.999*clamp(b));
    }

    negate() {
        return Vector(-this.x, -this.y, -this.z);
    }

    addVector(other) {
        return Vector(this.x + other.x, this.y + other.y, this.z + other.z);
    }

    subtractVector(other) {
        return Vector(this.x - other.x, this.y - other.y, this.z - other.z);
    }

    multiplyNum(num) {
        return Vector(num * this.x, num * this.y, num * this.z);
    }

    multiplyVec(other) {
        return Vector(this.x * other.x, this.y * other.y, this.z * other.z);
    }

    divideNum(num) {
        return Vector(this.x / num, this.y / num, this.z / num);
    }

    unitVector() {
        return this.divideNum(this.length());
    }

    lengthSquared() {
        return this.x*this.x + this.y*this.y + this.z*this.z;
    }

    length() {
        return sqrt(this.lengthSquared());
    }

    nearZero() {
        var s = 0.00000001;
        return (abs(this.x) < s) and (abs(this.y) < s) and (abs(this.z) < s);
    }
}

fun reflect(v, n) {
    var c = 2 * dot(v, n);
    return v.subtractVector(n.multiplyNum(c));
}

//
// Ray
//

class Ray {
    init(origin, dir) {
        this.origin = origin;
        this.dir = dir;
    }

    at(t) {
        return this.origin.addVector(this.dir.multiplyNum(t));
    }
}

//
// Hit Record
//

class HitRecord {
    init(point, t, normal, material) {
        this.point     = point;  // Point
        this.t         = t;      // double (intersect)
        this.normal    = normal; // Vector
        this.material  = material;
    }

    setFaceNormal(ray, outwardNormal) {
        this.frontFace = dot(ray.dir, outwardNormal) < 0;
        if (this.frontFace) {
            this.normal = outwardNormal;
        } else {
            this.normal = outwardNormal.multiplyNum(-1);
        }
    }
}

//
// Hittable
//

class Hittable {
    // returns hit record if hit or nil
    hit(ray, tMin, tMax) {}
}

class Sphere < Hittable {
    // returns hit record if hit or nil
    init(center, radius, material) {
        this.center = center;
        this.radius = radius;
        this.material = material;
    }

    hit(ray, tMin, tMax) {
        var oc = ray.origin.subtractVector(this.center);
        var a = dot(ray.dir, ray.dir);
        var half_b = dot(oc, ray.dir);
        var c = dot(oc, oc) - this.radius * this.radius;
        var discriminant = half_b*half_b - a*c;

        if (discriminant < 0) {
            return nil;
        }

         var discSqrt = sqrt(discriminant);
         var root = (-half_b - discSqrt) / a;
         if (root <= tMin or tMax <= root) {
            root = (-half_b + discSqrt) / a;
            if (root <= tMin or tMax <= root) {
                return nil;
            }
         }

         var t = root;
         var point = ray.at(t);
         var normal = point.subtractVector(this.center).divideNum(this.radius);
         var hitRecord = HitRecord(point, t, normal, this.material);
         hitRecord.setFaceNormal(ray, normal);
         return hitRecord;
     }
}

class Node {
    init(value, next) {
        this.value = value;
        this.next = next;
    }
}

class HittableList < Hittable {
    init() {
        this.head = nil;
    }

    // prepend item to linked list
    addHittable(hittable) {
        if (this.head == nil) {
            this.head = Node(hittable, nil);
        } else {
            var tmp = this.head;
            this.head = Node(hittable, tmp);
        }

    }

    // returns hit record if hit or nil
    hit(ray, tMin, tMax) {
        var hitRecord = nil;
        var hitAnything = false;
        var closestSoFar = tMax;

        var objNode = this.head;
        while (objNode != nil) {
            //print "objNode.radius = " + objNode.value.radius;
            var tmpHitRecord = objNode.value.hit(ray, tMin, closestSoFar);
            if (tmpHitRecord != nil) {
                hitAnything = true;
                closestSoFar = tmpHitRecord.t;
                hitRecord = tmpHitRecord;
            }
            objNode = objNode.next;
        }
        return hitRecord;
    }
}

//
// Materials
//

class ScatterRecord {
    // attenuation = color
    // scattered = ray
    init(attenuation, scattered) {
        this.attenuation = attenuation;
        this.scattered = scattered;
    }
}

class Material {
    // returns ScatterRecord
    scatter(rayIn, hitRecord) {}
}

class Lambertian {
    // returns ScatterRecord
    init(color) {
        this.albedo = color;
    }

    scatter(rayIn, hitRecord) {
        var scatterDir = hitRecord.normal.addVector(randomUnitVector());
        var scattered = Ray(hitRecord.point, scatterDir);
        var attenuation = this.albedo;
        return ScatterRecord(attenuation, scattered);
    }
}

class Metal {
    // returns ScatterRecord
    init(color) {
        this.albedo = color;
    }

    scatter(rayIn, hitRecord) {
        var reflected = reflect(rayIn.dir.unitVector(), hitRecord.normal);
        var scattered = Ray(hitRecord.point, reflected);
        var attenuation = this.albedo;
        return ScatterRecord(attenuation, scattered);
    }
}

//
// Math
//

var INF = 999999999;

fun abs(n) {
    if (n < 0) {
        return -n;
    } else {
        return n;
    }
}

fun sqrt(n) {
    var guess = 0;
    var result = n / 2;

    while (abs(guess - result) >= 0.00001) {
        guess = result;
        result = (guess + (n / guess)) / 2;
    }
    return result;
}

fun mod(n, divisor) {
    return (n - divisor * (n / divisor));
}

fun dot(u, v) {
    return u.x * v.x + u.y * v.y + u.z * v.z;
}

fun randomInRange(min, max) {
    return random() * (max - min) + min;
}

fun randomVector(min, max) {
    return Vector(
        randomInRange(min, max),
        randomInRange(min, max),
        randomInRange(min, max));
}

fun randomInUnitSphere() {
    while (true) {
        var p = randomVector(-1, 1);
        if (p.lengthSquared() < 1) {
            return p;
        }
    }
}

fun randomUnitVector() {
    return randomInUnitSphere().unitVector();
}

fun randomOnHemisphere(normal) {
    var onUnitSphere = randomUnitVector();
    if (dot(onUnitSphere, normal) > 0) {
        return onUnitSphere;
    } else {
        return onUnitSphere.multiplyNum(-1);
    }
}

//
// Camera
//

class Camera {
    init(aspectRatio, width, samplesPerPixel, childRays) {
        this.aspectRatio = aspectRatio;
        this.width = width;
        this.height = floor(width / aspectRatio);
        this.samplesPerPixel = samplesPerPixel;   // random samples per pixel (anti-aliasing)
        this.maxDepth = childRays;                // max number of ray bounces

        this.focalLen = 1.0;
        this.viewportHeight = 2.0;
        this.viewportWidth = this.viewportHeight * (this.width / this.height);
        this.cameraCenter = Vector(0, 0, 0);

        this.viewportU = Vector(this.viewportWidth, 0, 0);
        this.viewportV = Vector(0, -this.viewportHeight, 0);

        this.pixelDeltaU = this.viewportU.divideNum(this.width);
        this.pixelDeltaV = this.viewportV.divideNum(this.height);

        this.viewportUpperLeft = this.cameraCenter
            .subtractVector(Vector(0, 0, this.focalLen))
            .subtractVector(this.viewportU.divideNum(2))
            .subtractVector(this.viewportV.divideNum(2));

        this.pixelZeroZero = this.viewportUpperLeft
            .addVector(this.pixelDeltaU.addVector(this.pixelDeltaV).multiplyNum(0.5));
    }

    render(world) {
        writePpmHeader(this.width, this.height);
        for (var j = 0; j < this.height; j = j + 1) {
            for (var i = 0; i < this.width; i = i + 1) {
                var pixelColor = Vector(0, 0, 0);
                for (var s = 0; s < this.samplesPerPixel; s = s + 1) {
                    var ray = this.getRay(i, j);
                    pixelColor = pixelColor.addVector(this.rayColor(ray, this.maxDepth, world));
                }
                pixelColor.writeColorSamples(this.samplesPerPixel);//writeColor();
            }
        }
    }

    getRay(i, j) {
        var pixelCenter = this.pixelZeroZero
            .addVector(this.pixelDeltaU.multiplyNum(i))
            .addVector(this.pixelDeltaV.multiplyNum(j));
        var pixelSample = pixelCenter.addVector(this.pixelSampleSquare());
        var rayOrigin = this.cameraCenter;
        var rayDirection = pixelSample.subtractVector(rayOrigin);
        return Ray(rayOrigin, rayDirection);
    }

    pixelSampleSquare() {
        var px = -0.5 + random();
        var py = -0.5 + random();
        return this.pixelDeltaU.multiplyNum(px).addVector(this.pixelDeltaV.multiplyNum(py));
    }

    rayColor(ray, depth, hittable) {
        if (depth <= 0) {
            // exceeded ray bounce limit
            return Vector(0, 0, 0);
        }
        var hitRecord = hittable.hit(ray, 0.001, INF);
        if (hitRecord) {
            var scatterRecord = hitRecord.material.scatter(ray, hitRecord);
            if (scatterRecord) {
                return scatterRecord.attenuation.multiplyVec(this.rayColor(scatterRecord.scattered, depth - 1, world));
            }
            return Vector(0, 0, 0);
        }

        var unitDirection = ray.dir.unitVector();
        var a = 0.5 * (unitDirection.y + 1);
        var vecA = Vector(1, 1, 1).multiplyNum(1 - a);
        var vecB = Vector(0.5, 0.7, 1).multiplyNum(a);
        return vecA.addVector(vecB);
    }
}

//
// Raytracer
//

// Image

var aspectRatio = 16 / 9;
var width = 400;
var samplesPerPixel = 10;
var childRays = 5;

// World

var world = HittableList();
var materialGround = Lambertian(Vector(0.70, 0.70, 0.70));
var materialLeft   = Metal(     Vector(0.64, 0.16, 0.91));
var materialCenter = Lambertian(Vector(1.00, 0.87, 0.12));
var materialRight  = Metal(     Vector(0.21, 0.23, 0.90));

world.addHittable(Sphere(Vector( 0.0, -100.5, -1.0), 100.0, materialGround));
world.addHittable(Sphere(Vector(-1.0,    0.0, -1.0),   0.5, materialLeft));
world.addHittable(Sphere(Vector( 0.0,    0.0, -1.0),   0.5, materialCenter));
world.addHittable(Sphere(Vector( 1.0,    0.0, -1.0),   0.5, materialRight));

// Camera

var camera = Camera(aspectRatio, width, samplesPerPixel, childRays);
camera.render(world);