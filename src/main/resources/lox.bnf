; separate rules for each precedence level
; From Lowest to Highest Precedence

// each rule needs to match expressions at that precedence level
// or higher
//
// Grammar Notation    Code Representation
// Terminal            Code to match & consume a token
// Non-Terminal        Call to that rule's function
// |                   if or switch statement
// * or +              while or for loop
// ?                   if statement

expression  → assignment ;
assignment  → ( call ".")? IDENTIFIER "=" assignment
            | logic_or ;
logic_or    → logic_and ( "or" logic_and)* ;
logic_and   → equality ( "and" equality)* ;
equality    → comparison ( ( "!=" | "==" ) comparison)* ;
comparison  → term ( ( "<" | ">" | "<=" | ">=" ) term)* ;
term        → factor ( ( "+"  | "-"  | "*" | "/" ) factor)* ;
factor      → unary ( ( "/" | "*") unary)* ;
unary       → ( "!" | "-") unary
            | call ;
call        → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments   → expression ( "," expression )* ;
primary     → "true" | "false" | "nil"
            | NUMBER | STRING | IDENTIFIER | "(" expression ")"
            | "super" "." IDENTIFIER ;

// Top Level Grammar

program     → statement* EOF ;

declaration → classDecl
            | funDecl
            | varDecl
            | statement ;

classDecl   → "class" IDENTIFIER ( "<" IDENTIFIER)?
              "{" function* "}" ;
funDecl     → "fun" function ;
function    → IDENTIFIER "(" parameters? ")" block ;
parameters  → IDENTIFIER ( "," IDENTIFIER )* ;

statement   → exprStmt
            | forStmt
            | ifStmt
            | printStmt
            | returnStmt
            | whileStmt
            | block;

returnStmt  → "return" expression? ";" ;

forStmt     → "for" "(" ( varDecl | exprStmt | ";" )
              expression? ";"
              expression? ")" statement;

ifStmt      → "if" "(" expression ")" statement
               ( "else" statement )? ;

block       → "{" declaration* "}" ;

exprStmt    → expression ";" ;
printStmt   → "print" expression ";" ;

varDecl     → "var" IDENTIFIER ( "=" expression)? ";" ;

