; separate rules for each precedence level
; From Lowest to Highest Precedence

// each rule needs to match expressions at that precedence level
// or higher
//
// Grammar Notation    Code Representation
// Terminal            Code to match & consume a token
// Non-Terminal        Call to that rule's function
// |                   if or switch statement
// * or +              while or for loop
// ?                   if statement

expression  → assignment ;
assignment  → IDENTIFIER "=" assignment
            | equality ;
equality    → comparison ( ( "!=" | "==" ) comparison)* ;
comparison  → term ( ( "<" | ">" | "<=" | ">=" ) term)* ;
term        → factor ( ( "+"  | "-"  | "*" | "/" ) factor)* ;
factor      → unary ( ( "/" | "*") unary)* ;
unary       → ( "!" | "-") unary
            | primary
primary     → "true" | "false" | "nil"
            | NUMBER | STRING |
            | "(" expression ")"
            | IDENTIFIER;

// Top Level Grammar

program     → statement* EOF ;

declaration → varDecl
            | statement ;

statement   → exprStmt
            | printStmt
            | block;

block       → "{" declaration* "}" ;

exprStmt    → expression ";" ;
printStmt   → "print" expression ";" ;

varDecl     → "var" IDENTIFIER ( "=" expression)? ";" ;

